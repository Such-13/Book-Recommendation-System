Low-Level Design (LLD) Document
1. Web Application (app.py)
Description: The main entry point for the Flask web application. Handles routing and interaction with the recommendation engine.
Modules:
home(): Renders the home page and handles form submissions.
Dependencies: flask, pandas, joblib, preprocess, recommend
Code:
python
Copy code
from flask import Flask, request, render_template
import pandas as pd
import joblib
from preprocess import preprocess_data
from recommend import get_recommendations

app = Flask(__name__)

cosine_sim = joblib.load('model.pkl')
df = pd.read_csv('books.csv')
df = preprocess_data(df)

@app.route('/', methods=['GET', 'POST'])
def home():
    recommendations = []
    if request.method == 'POST':
        title = request.form['title']
        recommendations = get_recommendations(title, df, cosine_sim)
    return render_template('index.html', recommendations=recommendations)

if __name__ == '__main__':
    app.run(debug=True)
2. Data Preprocessing (preprocess.py)
Description: Module for preprocessing the book dataset.
Functions:
preprocess_data(df): Fills missing values and combines textual features.
Code:
python
Copy code
import pandas as pd

def preprocess_data(df):
    df.fillna('', inplace=True)
    df['combined_features'] = df['Title'] + ' ' + df['Author'] + ' ' + df['Genre'] + ' ' + df['Publisher']
    return df
3. Recommendation Engine (recommend.py)
Description: Module for generating book recommendations.
Functions:
get_recommendations(title, df, cosine_sim): Returns a list of recommended book titles based on cosine similarity.
Code:
python
Copy code
def get_recommendations(title, df, cosine_sim):
    if title not in df['Title'].values:
        return ["Book not found"]
    
    idx = df[df['Title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    
    valid_indices = [i[0] for i in sim_scores if i[0] < len(df)]
    
    return df['Title'].iloc[valid_indices].tolist()
4. Model Training (train_model.py)
Description: Script for preprocessing data, training the model, and saving the cosine similarity matrix.
Functions:
preprocess_data(df): Preprocesses the book data.
build_model(df): Builds the TF-IDF vectorizer and computes the cosine similarity matrix.
Code:
python
Copy code
import pandas as pd
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from preprocess import preprocess_data

df = pd.read_csv('books.csv')
df = preprocess_data(df)

def build_model(df):
    tfidf_vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf_vectorizer.fit_transform(df['combined_features'])
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
    return cosine_sim

cosine_sim = build_model(df)
joblib.dump(cosine_sim, 'model.pkl')

def get_recommendations(title, df, cosine_sim):
    idx = df[df['Title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    book_indices = [i[0] for i in sim_scores]
    return df['Title'].iloc[book_indices]

username = input("Enter book: ")
print(get_recommendations(username, df, cosine_sim))
Database Schema
books.csv
Title: Title of the book (String)
Author: Author of the book (String)
Genre: Genre of the book (String)
Publisher: Publisher of the book (String)
combined_features: Combined textual features (String)
Templates (HTML)
index.html: HTML template for the user interface.
CSS (Static Files)
style.css: Stylesheet for the web application (to be included in static directory).
